<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>TiltBlog</title><description>Frontend Technology Ramblings</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Tue, 06 Oct 2015 10:43:36 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Enabling Babel ES7 Features in SystemJS/JSPM</title><description>&lt;p&gt;Enabling &lt;a href="http://kangax.github.io/compat-table/es7/"&gt;ES7&lt;/a&gt; support in &lt;a href="https://github.com/systemjs/systemjs"&gt;SystemJS&lt;/a&gt;, is a pretty trivial thing to do, but took me a while to figure out how.  &lt;/p&gt;

&lt;p&gt;I'll cut to the chase and show you how:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;System.config({  
  "defaultJSExtensions": true,
  "transpiler": "babel",
  "babelOptions": {
        blacklist: [], 
        stage: 0,
    "optional": [
      "runtime"
    ]
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;blacklist&lt;/code&gt; option, ensures &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; does not ignore&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</description><link>http://localhost:2368/enabling-babel-es7-features-in-jspm/</link><guid isPermaLink="false">f1583001-b289-468d-ae4c-fb5d8aac28d9</guid><dc:creator>James Hill</dc:creator><pubDate>Fri, 04 Sep 2015 16:03:00 GMT</pubDate><content:encoded>&lt;p&gt;Enabling &lt;a href="http://kangax.github.io/compat-table/es7/"&gt;ES7&lt;/a&gt; support in &lt;a href="https://github.com/systemjs/systemjs"&gt;SystemJS&lt;/a&gt;, is a pretty trivial thing to do, but took me a while to figure out how.  &lt;/p&gt;

&lt;p&gt;I'll cut to the chase and show you how:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;System.config({  
  "defaultJSExtensions": true,
  "transpiler": "babel",
  "babelOptions": {
        blacklist: [], 
        stage: 0,
    "optional": [
      "runtime"
    ]
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;blacklist&lt;/code&gt; option, ensures &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; does not ignore JSX transformation, as by default itâ€™s disabled,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And &lt;code&gt;state:0&lt;/code&gt; tells &lt;strong&gt;Babel&lt;/strong&gt; that we want to use experimental ES7 syntax.  There are several stages on usage, providing a different subset of features.  &lt;a href="https://babeljs.io/docs/usage/experimental/"&gt;See here&lt;/a&gt; for explaination&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title>React-Router v1.0.0-rc1 Async Routes</title><description>&lt;p&gt;One of the game changers in the new &lt;a href="https://github.com/rackt/react-router"&gt;react-router&lt;/a&gt; release, is being able to define asynchronous route definitions for splitting up your code, enabling lazy loading of your components.&lt;/p&gt;

&lt;p&gt;Routes may define &lt;code&gt;getChildRoutes&lt;/code&gt; and &lt;code&gt;getComponents&lt;/code&gt; methods, to specify a method of retrieving your modules, as we'll see.&lt;/p&gt;

&lt;p&gt;Their example uses&lt;/p&gt;</description><link>http://localhost:2368/react-router-v1-0-0-rc1-async-routers/</link><guid isPermaLink="false">3cd0f83e-a0b4-4ac0-bd26-02088f8f1208</guid><category>react-router</category><category>react</category><dc:creator>James Hill</dc:creator><pubDate>Tue, 01 Sep 2015 06:11:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the game changers in the new &lt;a href="https://github.com/rackt/react-router"&gt;react-router&lt;/a&gt; release, is being able to define asynchronous route definitions for splitting up your code, enabling lazy loading of your components.&lt;/p&gt;

&lt;p&gt;Routes may define &lt;code&gt;getChildRoutes&lt;/code&gt; and &lt;code&gt;getComponents&lt;/code&gt; methods, to specify a method of retrieving your modules, as we'll see.&lt;/p&gt;

&lt;p&gt;Their example uses a declarative Object literal syntax, which I think can be improved upon:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var CourseRoute = {  
  path: 'course/:courseId',

  getChildRoutes(location, callback) {
    require.ensure([], function (require) {
      callback(null, [
        require('./routes/Announcements'),
        require('./routes/Assignments'),
        require('./routes/Grades'),
      ])
    })
  },

  getComponents(callback) {
    require.ensure([], function (require) {
      callback(null, require('./components/Course'))
    })
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this ticks most of the boxes, it means changing your usual usage somewhat.  Abstracting this away in say, into a dedicated class not only makes it more re-usable, but I think cleaner when implementing with React's render syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;import {Route} from 'react-router';

export default class AsyncRoute extends Route {}

AsyncRoute.defaultProps = {  
    getComponents(location, callback) {
        System.import(this.async).then((mod) =&amp;gt; {
            callback(null, mod.default);
        });
    },
    getChildRoutes (location, callback) {
        callback(null, this.children || []);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, extending the &lt;strong&gt;react-router's&lt;/strong&gt; &lt;code&gt;Route&lt;/code&gt; class to encapsulate the logic, has a lot of benefits.&lt;/p&gt;

&lt;p&gt;We've internalized the logic making it far more portable, as well as defining the contract for module loading in one place.&lt;/p&gt;

&lt;p&gt;Here I'm using the &lt;a href="https://github.com/systemjs/systemjs"&gt;SystemJS&lt;/a&gt; module loader, to dynamically load the Route's component when required.&lt;/p&gt;

&lt;p&gt;Their example uses &lt;a href="http://webpack.github.io/"&gt;Webpack's&lt;/a&gt; &lt;code&gt;require.ensure&lt;/code&gt; mechanism, although you could swap this out for any module loader prefered.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;class SomeView extends React.Component {  
   render() {
      return (
         &amp;lt;Router history={history}&amp;gt;
            &amp;lt;Route path='/' component={HomeView}/&amp;gt;
            &amp;lt;AsyncRoute path='login' async="some/path/LoginView.js"/&amp;gt;
         &amp;lt;/Router&amp;gt;
      )
   }
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Locking Down Node/NPM Versions Using Engines</title><description>&lt;p&gt;Although &lt;a href="https://nodejs.org"&gt;NodeJS&lt;/a&gt; and it's proprietary package manager, &lt;strong&gt;NPM&lt;/strong&gt;, have come on a lot in recent times, versioning can still be a mine-field, when setup projects on different systems and environments.&lt;/p&gt;

&lt;p&gt;With the release of version 3.x, &lt;strong&gt;Node&lt;/strong&gt; has changed it's approach to some degree, by flattening the endless, recursively&lt;/p&gt;</description><link>http://localhost:2368/locking-down-node-npm-versions-using-engines/</link><guid isPermaLink="false">1bedd4d4-1999-4d72-8161-440dc6af9102</guid><category>node</category><category>npm</category><category>engines</category><category>versions</category><dc:creator>James Hill</dc:creator><pubDate>Sun, 02 Aug 2015 08:34:00 GMT</pubDate><content:encoded>&lt;p&gt;Although &lt;a href="https://nodejs.org"&gt;NodeJS&lt;/a&gt; and it's proprietary package manager, &lt;strong&gt;NPM&lt;/strong&gt;, have come on a lot in recent times, versioning can still be a mine-field, when setup projects on different systems and environments.&lt;/p&gt;

&lt;p&gt;With the release of version 3.x, &lt;strong&gt;Node&lt;/strong&gt; has changed it's approach to some degree, by flattening the endless, recursively nested node_module folders, much to the relief of Windows users.&lt;/p&gt;

&lt;p&gt;This goes some way, to mitigating the versioning issues, but the most fundimental action, you need to undertake, is locking down the versions of &lt;strong&gt;Node&lt;/strong&gt; and &lt;strong&gt;NPM&lt;/strong&gt;, that your prject requires. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EcmaScript 2015 (ES6)&lt;/strong&gt; &lt;code&gt;let&lt;/code&gt; statements for example, just won't work under an incorrect version of &lt;strong&gt;Node&lt;/strong&gt;, but you're not going to get a warning to that affect either! &lt;/p&gt;

&lt;p&gt;We can ensure that Node alert us to these issues though, fairly easily.&lt;/p&gt;

&lt;h2 id="packagejsonengines"&gt;Package.json Engines  &lt;/h2&gt;

&lt;p&gt;Adding an &lt;code&gt;Engines&lt;/code&gt; node to your package.json, ensures that you have the specified versions installed.  Well, when I say 'ensures', it will spit out warnings if the versions don't match.&lt;/p&gt;

&lt;p&gt;For example, to specify the version of &lt;strong&gt;node&lt;/strong&gt; that your stuff works on:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-json"&gt;{
    "engines": {
        "node: "&amp;gt;=0.10.3 &amp;lt;0.12"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As per Npm's &lt;a href="https://docs.npmjs.com/files/package.json"&gt;documentation&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you specify an "engines" field, then npm will require that "node" be somewhere on that list. If "engines" is omitted, then npm will just assume that it works on node.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suffice to say, a fairly trivial addition, but an important one, when working across large teams, on different environments.&lt;/p&gt;</content:encoded></item><item><title>Play Idea No-SBT-Build-Module With-Sources</title><description>&lt;p&gt;Just saying ... &lt;br&gt;
Memory's not what it used to be!&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;jamiemacbook:play-module Jamie$ play  
       _            _
 _ __ | | __ _ _  _| |
| '_ \| |/ _' | || |_|
|  __/|_|\ ___|\__ (_)
|_|            |__/

play! 2.1.3 (using Java 1.6.0_45 and Scala 2.10.0), http://www.playframework.org  
[play-module] $ idea no-sbt-build-module with-sources=yes
&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/play-idea-no-sbt-build-module-with-sources/</link><guid isPermaLink="false">fc413f25-6320-47cc-94dd-88b739ce4bb4</guid><dc:creator>James Hill</dc:creator><pubDate>Thu, 12 Sep 2013 15:58:00 GMT</pubDate><content:encoded>&lt;p&gt;Just saying ... &lt;br&gt;
Memory's not what it used to be!&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;jamiemacbook:play-module Jamie$ play  
       _            _
 _ __ | | __ _ _  _| |
| '_ \| |/ _' | || |_|
|  __/|_|\ ___|\__ (_)
|_|            |__/

play! 2.1.3 (using Java 1.6.0_45 and Scala 2.10.0), http://www.playframework.org  
[play-module] $ idea no-sbt-build-module with-sources=yes
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Routing Overloaded Controller Actions in Play Framework 2</title><description>&lt;p&gt;Came across an interesting dilema whilst trying to wire up a tree control using Play Framework 2.&lt;/p&gt;

&lt;p&gt;The controls api only provides one method for retrieval of initial remote data and also subsequent loading of on-demand data for updating the control. So, how to wrap two remote requests using the&lt;/p&gt;</description><link>http://localhost:2368/routing-overloaded-controller-actions-in-play-framework-2/</link><guid isPermaLink="false">34369ee8-8e8b-49a3-acdf-7a6450de38b2</guid><dc:creator>James Hill</dc:creator><pubDate>Mon, 02 Sep 2013 15:44:00 GMT</pubDate><content:encoded>&lt;p&gt;Came across an interesting dilema whilst trying to wire up a tree control using Play Framework 2.&lt;/p&gt;

&lt;p&gt;The controls api only provides one method for retrieval of initial remote data and also subsequent loading of on-demand data for updating the control. So, how to wrap two remote requests using the same controller action? Overload the controller method! Er â€¦ not quite that simple â€¦!&lt;/p&gt;

&lt;p&gt;In Play, you canâ€™t â€“ for obvious reasons â€“ map the same url to different actions. This still applies to overloaded methods, as the framework still sees them as two separate methods, not simply two versions of the same thing!&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;# Routes
GET      /getData      controllers.Application.getData()  
GET      /getData      controllers.Application.getData(nodeId)  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;#Controller
public static Result getData() {  
    // load initial remote data to populate the control
}

public static Result getData(String nodeId) {  
    // load on-demand data to update control
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;language-bash
This is fortunately, easy to work around, by providing default parameters to a controller method, that can then decide which data it should load â€¦  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Routes
GET      /getData      controllers.Application.getData(id:String ?= "root")  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;#Controller
public static Result getData(String id) {  
    if (id == "root")
        return loadRootNodes();
    return loadNode(id);
}

public static Result loadRootNodes() {  
    // load initial remote data to populate the control
}

public static Result loadNode(String nodeId) {  
    // load on-demand data to update control
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Adding Multiple Assets To Your Swc Using Apache ANT And Adobe Flex Component Compiler (Compc)</title><description>&lt;p&gt;This is a topic I felt I should cover, as after many hours spent Googling, I still havenâ€™t found a viable solution, and neither does it seem, have scores of other Flex Developers.&lt;/p&gt;

&lt;p&gt;If you need to package an arbitary set of asset files in a swc, the process&lt;/p&gt;</description><link>http://localhost:2368/adding-multiple-assets-to-your-swc-using-apache-ant-and-adobe-flex-component-compiler-compc/</link><guid isPermaLink="false">e0180253-2087-46b4-821e-02394bd540cb</guid><dc:creator>James Hill</dc:creator><pubDate>Tue, 16 Apr 2013 15:42:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a topic I felt I should cover, as after many hours spent Googling, I still havenâ€™t found a viable solution, and neither does it seem, have scores of other Flex Developers.&lt;/p&gt;

&lt;p&gt;If you need to package an arbitary set of asset files in a swc, the process is not only laborious, but actually unworkable. The Compc Ant task, provides the â€˜include-fileâ€™ property, that lets you explicitly tell the compiler, that that file should be included in the resultant swc. On large scale enterprise applications â€“ that may contain hundreds of asset files â€“ there is no way of dynamically including the contents of a certain folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-python"&gt;&amp;lt;include-file name="an_image.png" value="path/to/image/folder/an_image.png"/&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After scratching my head for a considerable time, extending Compc and adding an easier mechanism to do this, seemed like the only option. So here it is â€“ Compcx (CompcExtended).&lt;/p&gt;</content:encoded></item><item><title>GlobalRemoteObjectFaultHandler Global Error Handler For Parsley 3</title><description>&lt;p&gt;Further to my &lt;a href="http://blog.tiltdigital.com/adobe/globalremoteobjectfaulthandler-woes/"&gt;previous post&lt;/a&gt;, I still couldnâ€™t get the GlobalRemoteObjectFaultHandler Metadata tag to capture application exceptions being thrown globally. And the reason became perfectly clear upon studying the &lt;a href="http://sourceforge.net/adobe/cairngorm/code/843/tree/cairngorm3/trunk/libraries/IntegrationParsley/"&gt;Cairngorm Parsley Integration&lt;/a&gt; code.&lt;/p&gt;

&lt;p&gt;Seems the Cairngorm code base is still stuck pre-Parsley 3, almost a year and a half&lt;/p&gt;</description><link>http://localhost:2368/globalremoteobjectfaulthandler-global-error-handler-for-parsley-3/</link><guid isPermaLink="false">f8a6c60f-3c8b-430c-98f1-8bd8ae5d0972</guid><dc:creator>James Hill</dc:creator><pubDate>Fri, 14 Dec 2012 16:41:00 GMT</pubDate><content:encoded>&lt;p&gt;Further to my &lt;a href="http://blog.tiltdigital.com/adobe/globalremoteobjectfaulthandler-woes/"&gt;previous post&lt;/a&gt;, I still couldnâ€™t get the GlobalRemoteObjectFaultHandler Metadata tag to capture application exceptions being thrown globally. And the reason became perfectly clear upon studying the &lt;a href="http://sourceforge.net/adobe/cairngorm/code/843/tree/cairngorm3/trunk/libraries/IntegrationParsley/"&gt;Cairngorm Parsley Integration&lt;/a&gt; code.&lt;/p&gt;

&lt;p&gt;Seems the Cairngorm code base is still stuck pre-Parsley 3, almost a year and a half after itâ€™s release.&lt;/p&gt;

&lt;p&gt;Solution â€“ Write the thing myself. Spent some time Googling for a solution, so I hope this might be useful to someone.&lt;/p&gt;

&lt;p&gt;The functionality is encapsulated by two classes, and the extension initialised in a third. Iâ€™ve renamed the extension GlobalServiceFault â€“ to keep a differentiation from the original. You can find the original â€˜GlobalRemnoteObjectFaultHandlerâ€™ code here.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;package  
{
  import mx.rpc.events.FaultEvent;

  import org.spicefactory.parsley.core.builder.ObjectDefinitionBuilder;
  import org.spicefactory.parsley.core.builder.ObjectDefinitionDecorator;
  import org.spicefactory.parsley.core.scope.ScopeName;
  import org.spicefactory.parsley.messaging.MessageHandler;

  [Metadata(types="method")]
  public class GlobalServiceFault implements ObjectDefinitionDecorator
  {
      [Target]
      public var method:String;

      private var proxyRegistered:Boolean = false;

      public var scope:String = ScopeName.GLOBAL;

      public function decorate(builder:ObjectDefinitionBuilder):void
      {
          if (!proxyRegistered)
          {
              proxyRegistered = true;
              builder
                  .registry
                      .builders
                      .forClass(GlobalServiceFaultProcessor)
                      .asSingleton()
                      .register();
          }

          MessageHandler
              .forMethod(method)
                  .type(FaultEvent)
                  .scope(scope)
                  .selector(GlobalServiceFaultProcessor.messageSelector)
                      .apply(builder);
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the ObjectProcessor â€¦  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package  
{
  import mx.rpc.events.FaultEvent;
  import mx.rpc.remoting.RemoteObject;

  public class GlobalServiceFaultProcessor
  {
      public static const messageSelector:String = "cairngorm::globalFault";

      [MessageDispatcher]
      public var dispatcher:Function;

      [Observe(phase="preInit")]
      public function preInit(ro:RemoteObject):void
      {
          ro.addEventListener(FaultEvent.FAULT, handleFault);
      }

      [Observe(phase="postDestroy")]
      public function postDestroy(ro:RemoteObject):void
      {
          ro.removeEventListener(FaultEvent.FAULT, handleFault);
      }

      private function handleFault(event:FaultEvent):void
      {
          dispatcher(event, messageSelector);
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get it all working, you need to register the new Metadata with Parsley. &lt;a href="http://www.spicefactory.org/parsley/docs/3.0/manual/extensions.php#metadata_register"&gt;(see here)&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Metadata.registerMetadataClass(GlobalServiceFault);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and also specify to the mxmlc compiler to keep instances of your new metadata from being striped out.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-keep-as3-metadata+=GlobalServiceFault
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>GlobalRemoteObjectFaultHandler woes</title><description>&lt;p&gt;Honestly, the trouble Iâ€™ve had trying to get Parsleyâ€™s &lt;strong&gt;GlobalRemoteObjectFaultHandler&lt;/strong&gt; working, you wouldnâ€™t believe. The documentation on the Spicefactory site is blessedly comprehensive (well at least to a certain level), but it can be frustrating trying to find specific use-case examples when the documentation falls short. (Sorry&lt;/p&gt;</description><link>http://localhost:2368/globalremoteobjectfaulthandler-woes/</link><guid isPermaLink="false">2aa62ea0-435d-43d5-82c6-484c6ecbc5da</guid><dc:creator>James Hill</dc:creator><pubDate>Fri, 14 Dec 2012 16:34:00 GMT</pubDate><content:encoded>&lt;p&gt;Honestly, the trouble Iâ€™ve had trying to get Parsleyâ€™s &lt;strong&gt;GlobalRemoteObjectFaultHandler&lt;/strong&gt; working, you wouldnâ€™t believe. The documentation on the Spicefactory site is blessedly comprehensive (well at least to a certain level), but it can be frustrating trying to find specific use-case examples when the documentation falls short. (Sorry Jens, criticism is not my intention!).&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;a href="http://ensharable.wordpress.com/2010/08/23/globalremoteobjectfaulthandler/"&gt;this post&lt;/a&gt; saved my bacon.&lt;/p&gt;

&lt;p&gt;I had done just that â€“ adding the CairngormIntegrationSupport tag to the ContextBuilder, but my downfail was the cairngorm namespace declaration being used.  Iâ€™d previously had &lt;a href="http://sourceforge.net/adobe/cairngorm/wiki/HowToUseCairngormPopup/"&gt;Cairngorm Popup Library&lt;/a&gt; functionality imported, that had automatically added the following namespace for Cairngorm:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href="http://ns.adobe.com/cairngorm"&gt;http://ns.adobe.com/cairngorm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But as the post above describes, to get the Cairngorm integration working, the Cairngorm namespace required is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;com.adobe.cairngorm.*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks Adobe for suffering me hours of head scratching!&lt;/p&gt;</content:encoded></item><item><title>Explicitly Adding LineBreaks to Spark Labels</title><description>&lt;p&gt;Just a quick one, primarily for my memoryâ€™s â€“ or lack there of â€“ benefit.&lt;/p&gt;

&lt;p&gt;When trying to explicitly break some text across multiple lines, in Spark components that donâ€™t natively use html text, such as Label, trying to break the line with \n never seems to work.&lt;/p&gt;

&lt;p&gt;By wrapping&lt;/p&gt;</description><link>http://localhost:2368/explicitly-adding-linebreaks-to-spark-labels/</link><guid isPermaLink="false">537dab71-a6a5-445b-a2fb-7d52230d667e</guid><dc:creator>James Hill</dc:creator><pubDate>Tue, 29 May 2012 15:40:00 GMT</pubDate><content:encoded>&lt;p&gt;Just a quick one, primarily for my memoryâ€™s â€“ or lack there of â€“ benefit.&lt;/p&gt;

&lt;p&gt;When trying to explicitly break some text across multiple lines, in Spark components that donâ€™t natively use html text, such as Label, trying to break the line with \n never seems to work.&lt;/p&gt;

&lt;p&gt;By wrapping it in parenthesis â€“ {â€˜\nâ€™} â€“ we can achieve the desired result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// results in ...
The quick brown fox  
jumps over the lazy dog  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Happy 78th Birthday Robert Moog!</title><description>&lt;p&gt;I have to say, Iâ€™ve always been a fan of &lt;strong&gt;Googleâ€™s Doodles&lt;/strong&gt;, but was amazed to see todays Google Doodle â€“ a tribute to the the Synth Father himself, &lt;a href="http://www.google.com/doodles/robert-moogs-78th-birthday"&gt;Dr Robert Moog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The actual Google Doogle is a fully playable Mini Moog ( well sort of fully playable! ).&lt;/p&gt;

&lt;p&gt;Much like&lt;/p&gt;</description><link>http://localhost:2368/happy-78th-birthday-robert-moog/</link><guid isPermaLink="false">57bd1ed0-4ca8-4b25-9556-7ca758b5a36a</guid><dc:creator>James Hill</dc:creator><pubDate>Wed, 23 May 2012 15:36:00 GMT</pubDate><content:encoded>&lt;p&gt;I have to say, Iâ€™ve always been a fan of &lt;strong&gt;Googleâ€™s Doodles&lt;/strong&gt;, but was amazed to see todays Google Doodle â€“ a tribute to the the Synth Father himself, &lt;a href="http://www.google.com/doodles/robert-moogs-78th-birthday"&gt;Dr Robert Moog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The actual Google Doogle is a fully playable Mini Moog ( well sort of fully playable! ).&lt;/p&gt;

&lt;p&gt;Much like the musical machines &lt;strong&gt;Bob Moog&lt;/strong&gt; created, this doodle was synthesized from a number of smaller components to form a unique instrument. When experienced with Google Chrome, sound is generated natively using the &lt;a href="http://www.html5rocks.com/en/tutorials/webaudio/intro/"&gt;Web Audio API&lt;/a&gt; â€”a doodle first (for other browsers the Flash plugin is used). This doodle also takes advantage of &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;Closure libraries&lt;/strong&gt;, &lt;strong&gt;CSS3&lt;/strong&gt; and tools like &lt;strong&gt;Google Web Fonts&lt;/strong&gt;, the &lt;strong&gt;Google+ API&lt;/strong&gt;, the &lt;strong&gt;Google URL Shortener&lt;/strong&gt; and &lt;strong&gt;App Engine&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.google.com/doodles/robert-moogs-78th-birthday"&gt;Check it out!&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Spark invalidateSkinState vs getCurrentSkinState Gotcha</title><description>&lt;p&gt;Sometimes coding can be a painful experience. When youâ€™re seemingly following all the rules as defined by the API youâ€™re using, yet things just donâ€™t want to work as you know they should.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;override protected function commitProperties():void  
{
     super.commitProperties();

     // do something

     invalidateSkinState();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I one such recent&lt;/p&gt;</description><link>http://localhost:2368/spark-invalidateskinstate-vs-getcurrentskinstate-gotcha/</link><guid isPermaLink="false">74737c1f-fbb1-4e92-b9cc-0aba6de29afe</guid><dc:creator>James Hill</dc:creator><pubDate>Wed, 02 May 2012 15:35:00 GMT</pubDate><content:encoded>&lt;p&gt;Sometimes coding can be a painful experience. When youâ€™re seemingly following all the rules as defined by the API youâ€™re using, yet things just donâ€™t want to work as you know they should.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;override protected function commitProperties():void  
{
     super.commitProperties();

     // do something

     invalidateSkinState();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I one such recent predicament, the &lt;strong&gt;getCurrentSkinState&lt;/strong&gt; was simply not being triggered after issuing an â€˜invalidateSkinStateâ€™. Upon testing, the issue seemed sporadic, with getCurrentSkinState being called most of the time, but not ALL the time as I would expect.&lt;/p&gt;

&lt;p&gt;The case in question, was a custom PopUpButton, that simply wouldnâ€™t close if clicking outside the target area. A multitude of breakpoints later with my temper rising, I finally discovered the issue. Iâ€™d been calling â€˜invalidateSkinStateâ€™ inside â€˜commitPropertiesâ€™ but after the super.commitProperties call. Is better illustrated with some code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;override protected function commitProperties():void  
{
     super.commitProperties();

     // do something

     invalidateSkinState();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would seem like a sensible line of approach, considering the Spark component lifecycle architecture â€“ pooling property changes on the component, assessing the components required new state in commitProperties, before commanding the skin to adopt the new state, and represent it visually.&lt;/p&gt;

&lt;p&gt;Letâ€™s look at the method â€˜invalidateSkinStateâ€™ and â€˜commitPropertiesâ€™ on SkinnableComponent, to see whatâ€™s going wrong hereâ€¦&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;public function invalidateSkinState():void  
{
     if (skinStateIsDirty)
          return; // State is already invalidated

     skinStateIsDirty = true;
     invalidateProperties();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, skinStateIsDirty is set to true, before calling invalidateProperties. But because weâ€™re in the middle of the current validation pass, the â€˜invalidatePropertiesâ€™ call in â€˜invalidateSkinStateâ€™ method above, is never going to be honoured. And hereâ€™s whyâ€¦&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;public function validateProperties():void  
{
     if (invalidatePropertiesFlag)
     {
          commitProperties();
          invalidatePropertiesFlag = false;
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha! As you can see, after invoking commitProperties, the â€˜invalidateProperitesFlagâ€™ is immediately set to false. Thus, the invalidateProperties() call that was issued by the invalidateSinState() method will never result in another validation pass. It stands to reason, that trying to invalidate a componentâ€™s properties from inside commitProperties is a bad idea. Without such breakout logic, youâ€™d experience an infinite loop of validation passes.&lt;/p&gt;

&lt;p&gt;So, to conclude, by taking this into account, the problem is easily solved, by invalidating the skinâ€™s state, before any validation pass occurs.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;override protected function commitProperties():void  
{
     invalidateSkinState();

     // do something

     super.commitProperties();
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Remove Spark ButtonBar Selection Toggle Behaviour</title><description>&lt;p&gt;One thing that consistently annoys me is the behaviour of the Spark ButtonBar. Without any customisation, clicking one of the buttons on a Spark ButtonBar, puts said Button into itâ€™s selected state. Conversely, the Halo ButtonBar has the opposite â€“ and should I say more desirable â€“ effect, of not gluing&lt;/p&gt;</description><link>http://localhost:2368/remove-spark-buttonbar-selection-toggle-behaviour/</link><guid isPermaLink="false">3d0ddfa3-2b9c-49e2-9b05-adb8f6d78672</guid><dc:creator>James Hill</dc:creator><pubDate>Fri, 13 Apr 2012 15:34:00 GMT</pubDate><content:encoded>&lt;p&gt;One thing that consistently annoys me is the behaviour of the Spark ButtonBar. Without any customisation, clicking one of the buttons on a Spark ButtonBar, puts said Button into itâ€™s selected state. Conversely, the Halo ButtonBar has the opposite â€“ and should I say more desirable â€“ effect, of not gluing the buttons state to selected.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[SWF]/wp-content/uploads/2012/04/SparkButtonBarOldBehaviour.swf, 350, 100[/SWF]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It got me thinking as to how best to overcome this behaviour â€“ or better still, give the user the option of having it behave in either manner.&lt;/p&gt;

&lt;p&gt;My initial though was simply to create a new ButtonBarButtonSkin, which could ignore the â€˜selectedStatesâ€™ group. But this would require a ButtonBarFirstButtonSkin, ButtonBarMiddleButtonSkin, ButtonBarLastButtonSkin and the parent ButtonBarSkin! Phew, too much work, and too obtrusive.&lt;/p&gt;

&lt;p&gt;The second option was to simply listen to the ButtonBarâ€™s IndexChangeEvent and set the selectedIndex back to -1 everytime a button was clicked. Given the three locations I might perform this:&lt;/p&gt;

&lt;p&gt;Outside of the component by listening to the ButtonBarâ€™s change event, &lt;br&gt;
Extending ButtonBar and hijacking the commitSelection method to revert the selection, or &lt;br&gt;
Changing the Skins state, in the skin, depending on the â€˜requireSelectionâ€™ property &lt;br&gt;
I chose to go with the later, as it seemed the cleanest, most unobtrusive way, requiring the least amount of work, and the most reusable.&lt;/p&gt;

&lt;p&gt;By listening for the â€˜changeâ€™ event on the hostComponent in ButtonBarSkin, we could toggle the behaviour based on the â€˜requireSelectionâ€™ property. When requireSelection = true, the ButtonBar behaves with itâ€™s usual Spark behaviour. When requireSelection = false, it would adopt the legacy Halo behaviour.&lt;/p&gt;

&lt;p&gt;(Right click for source)&lt;/p&gt;

&lt;p&gt;[SWF]/wp-content/uploads/2012/04/SparkButtonBarBehaviour.swf, 350, 100[/SWF]&lt;/p&gt;</content:encoded></item><item><title>Adobe Flash Builder 4.6 - Remove Welcome Screen</title><description>&lt;p&gt;Iâ€™ve just installed Adobeâ€™s latest incarnation of Flash Builder, Adobe Flash Builder 4.6, to be presented with the familiar â€˜Welcomeâ€™ screen weâ€™ve been seeing on the Eclipse platform for years now. Only trouble is, usually thereâ€™s a checkbox, letting you specify that you donâ€™t&lt;/p&gt;</description><link>http://localhost:2368/adobe-flash-builder-4-6-remove-welcome-screen/</link><guid isPermaLink="false">d91a246c-d792-4f31-9439-c7e42eb2e169</guid><dc:creator>James Hill</dc:creator><pubDate>Sun, 18 Dec 2011 16:50:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2015/10/screen_shot.jpg" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2015/10/screen_shot.jpg" alt="Adobe Flash Builder 4.6 - Remove Welcome Screen"&gt;&lt;p&gt;Iâ€™ve just installed Adobeâ€™s latest incarnation of Flash Builder, Adobe Flash Builder 4.6, to be presented with the familiar â€˜Welcomeâ€™ screen weâ€™ve been seeing on the Eclipse platform for years now. Only trouble is, usually thereâ€™s a checkbox, letting you specify that you donâ€™t want to see it again when starting Eclipse up. Not any more. And can I find the setting in Preferences to disable the bally thing? Nope.&lt;/p&gt;

&lt;p&gt;After searching the Preferences for a while, I finally found the option I was after.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://drive.google.com/open?id=0B0huQxel9-k6ZTZWTXlDZ1Q3XzA" alt="Adobe Flash Builder 4.6 - Remove Welcome Screen"&gt;&lt;/p&gt;</content:encoded></item><item><title>Flex Spark Skin Transition to Animate Boolean Properties</title><description>&lt;p&gt;There may be a better/more â€˜Sparkâ€™ way of doing this but at the moment I canâ€™t find how. When entering a certain state in my SparkSkin, I needed to flash a couple of LEDs. The LEDâ€™d are basically ToggleButtons, so we basically just need to â€˜toggleâ€™ the&lt;/p&gt;</description><link>http://localhost:2368/flex-spark-skin-transition-to-animate-boolean-properties/</link><guid isPermaLink="false">488e1c04-0c3d-4143-897e-0f9b7ba2f9db</guid><dc:creator>James Hill</dc:creator><pubDate>Mon, 12 Dec 2011 16:31:00 GMT</pubDate><content:encoded>&lt;p&gt;There may be a better/more â€˜Sparkâ€™ way of doing this but at the moment I canâ€™t find how. When entering a certain state in my SparkSkin, I needed to flash a couple of LEDs. The LEDâ€™d are basically ToggleButtons, so we basically just need to â€˜toggleâ€™ the â€˜selectedâ€™ property at regular intervals.&lt;/p&gt;

&lt;p&gt;The final solution proved a little more fiddly, but the result works well.&lt;/p&gt;

&lt;p&gt;[SWF]/wp-content/uploads/2011/12/FlightDeckPanel.swf, 477, 175[/SWF]&lt;/p&gt;

&lt;h2 id="thesolution"&gt;The Solution  &lt;/h2&gt;

&lt;p&gt;Using the SetAction Effect initially seemed like the way to go, but it hit me that this only seemed appropriate when combining in Sequence with an actual â€˜visiualâ€™ IEffect instance.&lt;/p&gt;

&lt;p&gt;The SetAction Effect, does what it says on the tin, itâ€™s simpl an action that sets a property. It doesnâ€™t have a duration, or repeatCount etc. that other IEffects have. As such, the only way of achieving a sequence of SetActions, at specified intervals, would be to combine it with a â€˜dummyâ€™ Effectâ€¦&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```

But using â€˜dummyâ€™ effects, just to achieve our goal, is a hackish way of doing things. After considering different options, it occurred to me that similar functionality could be achieved using the Animate IEffect.

The Animate IEffect offers all of the functionality to specify a duration and repeat behaviour that I required, with the properties needing to be â€˜Animatedâ€™ specified using a SimpleMotionPath instance. Bingo!

But no, this didnâ€™t seem to work either, and upon further investigation, it seemed that Boolean properties just werenâ€™t rendered correctly. The default interpolation method used by the Animate class is the NumberInterpolator â€“ which provides interpolation between start and end values represented as Number instances. Now Boolean true and false can be represented as Number values 1 and 0, so I would have expected it to work. But the interpolated number sequence when interpolating between 1 and 0 would obviously pose a problem, when my component was expecting a simple 1 or 0. Which led me to the idea of a BooleanInterpolator.

The BooleanInterpolator  
-----------------------

I wonâ€™t expand on the implementation here, as itâ€™s not necessary. I simply implemented the IInterpolator interface, and fixed the interpolated values to either 1 or 0, and it worked!

You can [download the BooleanInterpolator here](http://blog.tiltdigital.com/wp-content/uploads/2011/12/BooleanInterpolator.as).

So, there we have it. A way of Animating between Boolean values, suitable for use in Spark Transitions.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```
And there we have it. Pretty simple really. Thereâ€™s always another way of skinning a cat, so please let me know if youâ€™ve faced a similar problem before and used an entirely different solution.&lt;/p&gt;</content:encoded></item><item><title>Finding An HtmlLoader DOM Elementâ€™s Absolute Position in Adobe AIR</title><description>&lt;p&gt;Being a Flash developer, and not an HTML/Javascript developer, I mistakenly thought that retrieving the absolute x/y coordinates of an element loaded into the DOM of Airâ€™s HTMLLoader might be easy â€“ I was wrong :(&lt;/p&gt;

&lt;p&gt;I needed to find the exact position of a Captcha image within the&lt;/p&gt;</description><link>http://localhost:2368/finding-an-htmlloader-dom-elements-absolute-position-in-adobe-air/</link><guid isPermaLink="false">7e03e1cb-2d77-4e1e-ad33-050f09cf800a</guid><dc:creator>James Hill</dc:creator><pubDate>Fri, 28 Oct 2011 15:39:00 GMT</pubDate><content:encoded>&lt;p&gt;Being a Flash developer, and not an HTML/Javascript developer, I mistakenly thought that retrieving the absolute x/y coordinates of an element loaded into the DOM of Airâ€™s HTMLLoader might be easy â€“ I was wrong :(&lt;/p&gt;

&lt;p&gt;I needed to find the exact position of a Captcha image within the loaded page, in order to do a BitmapData.draw on it. After an initial Google, it seemed there are decent Javascript functions that might achieve this, but the problem lay in not having any control over the contents of the page I was loading. Adding addition Javascript functionality to the page wasnâ€™t an option â€“ Big, bad DOM to the rescue!&lt;/p&gt;

&lt;h2 id="usejavascripttofindposition"&gt;USE JAVASCRIPT TO FIND POSITION  &lt;/h2&gt;

&lt;p&gt;Below, is the Javascript function chosen to get the Elementâ€™s absolute page position. Iâ€™ve collapsed it by default, as is long and er.. Javascript.&lt;/p&gt;

&lt;p&gt;I wonâ€™t go into the code, but suffice to say that it does indeed correctly return the absolute position of an element. Credit should go to Peter-Paul Koch and Alex Tingle for the solution!&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function findPositionX(obj)  
{
    var left = 0;
    if(obj.offsetParent)
    {
        while(1)
        {
          left += obj.offsetLeft;
          if(!obj.offsetParent)
            break;
          obj = obj.offsetParent;
        }
    }
    else if(obj.x)
    {
        left += obj.x;
    }
    return left;
}

function findPosY(obj)  
{
    var top = 0;
    if(obj.offsetParent)
    {
        while(1)
        {
          top += obj.offsetTop;
          if(!obj.offsetParent)
            break;
          obj = obj.offsetParent;
        }
    }
    else if(obj.y)
    {
        top += obj.y;
    }
    return top;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="injectjavascriptintohtmlloadersdom"&gt;INJECT JAVASCRIPT INTO HTMLLOADERâ€™S DOM  &lt;/h2&gt;

&lt;p&gt;Now, to get the Javascript into our DOM, thereby effectively injecting it into the page we just loaded. This is a fairly easy process, and no-doubt one that will be pretty familiar to even the most novice HTML Developers, but for us Flash devs, this may not be so obvious. Once the HTMLLoader Event.COMPLETE has been fired, you can then retrieve the resulting Document Object Model, in order to inject our new Javascript functions, from the HTMLLoader.&lt;/p&gt;

&lt;p&gt;Below, we create a new javascript element â€˜Scriptâ€™, and set itâ€™s text property with the Javascript we want to inject, before appending the new element to the â€˜headâ€™ of the HTML page in the DOM.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;script = loader.window.document.createElement("script")  
script.type = "text/javascript"  
script.text = "function findPositionX(obj) { ---- }";  
loader.window.document.getElementsByTagName("head")[0].appendChild( script );  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if you inspect the DOM, youâ€™ll see the page you previously loaded, contains the Javascript we just injected â€“ cool huh!&lt;/p&gt;

&lt;h2 id="puttingitintoaction"&gt;PUTTING IT INTO ACTION  &lt;/h2&gt;

&lt;p&gt;So, now we have a Web page we had no control over, loaded into our HTMLLoader, will the Javascript functionlity to get our elements absolute position, added to the DOM. We can now simply retrieve a reference to our object from the DOM, and pass to the findPositionX and findPositionY functions to retrieve the position, as suchâ€¦&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;captchaImage = dom.getElementById( "imgCaptcha" );

xPos = loader.window.findPositionX( captchaImage );  
yPos = loader.window.findPositionY( captchaImage );

bitmapData.draw( loader, null, null, null,  
    new Rectangle( xPos, yPos, captchaImage.width, captchaImage.height ) );
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item></channel></rss>